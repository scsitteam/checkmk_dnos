#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2023-2024  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import re
import difflib
import argparse
import paramiko
from functools import cached_property

import cmk.utils.password_store

cmk.utils.password_store.replace_passwords()


class CheckDNOSCommit(object):
    def __init__(self):
        self.parse_arguments()

    def check(self):
        try:
            self.ssh_read()
            self.ssh_cmd("en")
            self.ssh_cmd("terminal length 0")
            if self.running_config == self.startup_config:
                print("OK: running and startup config match")
                return 0
            else:
                print("WARNING: running config differs from startup config")
                for line in difflib.unified_diff(self.startup_config, self.running_config, fromfile='startup-config', tofile='running-config'):
                    print(line.rstrip())
                return 1
        except Exception as e:
            print(f"UNKNOWN: {e}")
            return 3

    def parse_arguments(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-H", "--host", required=True, help="Hostname for DNOS login")
        parser.add_argument("-u", "--user", required=True, help="Username for DNOS login")
        parser.add_argument("-p", "--password", default=None, help="Password for DNOS login")
        parser.add_argument("-d", "--debug", action="store_true", default=False)
        self.args = parser.parse_args()

    @cached_property
    def running_config(self):
        return self.ssh_cmd("show running-config").splitlines(keepends=True)

    @cached_property
    def startup_config(self):
        return self.ssh_cmd("show startup-config").splitlines(keepends=True)

    @cached_property
    def ssh(self):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(
            self.args.host,
            username=self.args.user,
            password=self.args.password,
        )
        return client.invoke_shell()

    def ssh_read(self):
        buffer = ""

        while re.search(r'(?:^|\n)\S+(?:#|>) ?$', buffer) is None:
            buffer += self.ssh.recv(1024).decode(encoding='utf-8')

        if re.search('Invalid input detected', buffer):
            raise Exception('Invalid input detected')

        if self.args.debug:
            print(f"<< {buffer}")
        return buffer

    def ssh_cmd(self, cmd):
        if self.args.debug:
            print(f">> {cmd}")
        num = self.ssh.send(f"{cmd}\n")
        while num > 0:
            buffer = self.ssh.recv(num).decode(encoding='utf-8')
            num -= len(buffer)
        return self.ssh_read()


if __name__ == "__main__":
    check = CheckDNOSCommit()
    exit(check.check())
